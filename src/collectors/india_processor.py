# -*- coding: utf-8 -*-
"""India Processor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cr6KxUTlAaz-vC9akoHyp33OpYcWePX_
"""

import pandas as pd
from pathlib import Path
import os
import logging


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

EDIZM_TO_ISO = {
    "KGS": "166",
    "KG": "166",
    "T": "163",
    "TON": "163",
    "NOS": "796",
    "NO": "796",
    "PAIRS": "796",
    "LTR": "876",
    "L": "876",
    "M2": "260",
    "M3": "113",
    "M": "006",
    "U": "796",
    "?": None
}

def process_and_merge_india_data(raw_data_dir: Path, output_file: Path):


    logger.info("=== Начало обработки данных Индии ===")

    all_files = sorted(raw_data_dir.glob("india_data_*.csv"))
    if not all_files:
        logger.error(f"Не найдено файлов в {raw_data_dir}")
        return

    logger.info(f"Найдено {len(all_files)} файлов для объединения")

    dfs = []
    for file_path in all_files:
        try:
            df = pd.read_csv(file_path)
            logger.info(f"  → {file_path.name}: {len(df)} строк")

            df['PERIOD'] = pd.to_datetime(
                df['Year'].astype(str) + '-' + df['Month'].astype(str).str.zfill(2) + '-01',
                errors='coerce'
            )


            for col in ['STOIM', 'STOIM_NAC_VAL', 'NETTO', 'KOL']:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')


            if 'EDIZM' in df.columns:
                df['EDIZM'] = df['EDIZM'].astype(str).str.strip().replace({'nan': '?', 'None': '?'})
            else:
                df['EDIZM'] = '?'

            df['EDIZM_ISO'] = df['EDIZM'].map(EDIZM_TO_ISO)

            df_final = df[[
                'NAPR', 'PERIOD', 'STRANA', 'TNVED',
                'EDIZM', 'EDIZM_ISO', 'STOIM', 'NETTO',
                'KOL', 'TNVED4', 'TNVED6', 'TNVED2'
            ]].copy()

            dfs.append(df_final)

        except Exception as e:
            logger.error(f"Ошибка при обработке {file_path.name}: {e}")

    if not dfs:
        logger.error("Не удалось обработать ни один файл.")
        return

    final_df = pd.concat(dfs, ignore_index=True)

    final_df.drop_duplicates(inplace=True)
    final_df.sort_values(by=['PERIOD', 'NAPR', 'TNVED'], inplace=True)

    output_file.parent.mkdir(parents=True, exist_ok=True)
    if output_file.exists():
        os.remove(output_file)

    logger.info(f"Сохранение объединённого набора в {output_file}")
    try:
        final_df.to_parquet(output_file, index=False)
        logger.info(f"Успешно сохранено. Всего строк: {len(final_df)}")
    except ImportError:
        logger.error("Не установлен pyarrow. Установите: pip install pyarrow")

def main():
    try:
        project_root = Path(__file__).resolve().parent.parent.parent
    except NameError:
        project_root = Path(os.getcwd())

    raw_data_dir = project_root / 'data_raw' / 'india_new'
    output_file = project_root / 'data_processed' / 'in_full.parquet'

    process_and_merge_india_data(raw_data_dir, output_file)


if __name__ == "__main__":
    main()